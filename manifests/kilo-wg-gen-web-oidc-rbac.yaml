apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: kilo-wg-gen-web
  name: kilo-wg-gen-web
spec:
  ports:
  - name: http
    port: 80
    targetPort: 8080
  selector:
    app.kubernetes.io/name: kilo-wg-gen-web
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kilo-wg-gen-web
  labels:
    app.kubernetes.io/name: kilo-wg-gen-web
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: kilo-wg-gen-web
  serviceName: kilo-wg-gen-web
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kilo-wg-gen-web
    spec:
      initContainers:
      - image: squat/kilo-wg-gen-web
        name: setnode
        args:
        - setnode
        - $(NODE)
        - --allowed-ips=$(ALLOWED_IPS)
        - --address-pools=$(ADDRESS_POOLS)
        - --dir=/data
        env:
        - name: NODE
          value: example
        - name: ALLOWED_IPS
          value: 10.5.0.0/16
        - name: ADDRESS_POOLS
          value: 10.6.0.0/16
        volumeMounts:
        - name: data
          mountPath: /data
      containers:
      - image: squat/kilo-wg-gen-web
        name: kilo-wg-gen-web
        args:
        - --listen=:8081
        - --dir=/data
        ports:
        - containerPort: 8081
          name: metrics
        volumeMounts:
        - name: data
          mountPath: /data
      - image: vx3r/wg-gen-web
        name: wg-gen-web
        env:
        - name: PORT
          value: '8080'
        - name: SERVER
          value: '127.0.0.1'
        - name: WG_CONF_DIR
          value: /data
        ports:
        - containerPort: 8080
          name: http
        volumeMounts:
        - name: data
          mountPath: /data
      - args:
        - --logtostderr
        - --secure-listen-address=[$(IP)]:9100
        - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
        - --upstream=http://127.0.0.1:8080/
        - --config-file=/etc/kube-rbac-proxy/config-file.yaml
        env:
        - name: IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: quay.io/brancz/kube-rbac-proxy:HEAD-2020-05-07-2fd48d73
        name: kube-rbac-proxy
        ports:
        - containerPort: 9100
          name: https
        resources:
          limits:
            cpu: 20m
            memory: 40Mi
          requests:
            cpu: 10m
            memory: 20Mi
        volumeMounts:
        - name: config
          mountPath: /etc/kube-rbac-proxy
      - name: proxy
        image: quay.io/oauth2-proxy/oauth2-proxy:v5.1.0-arm64
        args:
        - --http-address=$(IP):8080
        - --upstream=https://$(IP):9100
        - --redirect-url=$(REDIRECT_URL)
        - --provider=oidc
        - --oidc-issuer-url=$(ISSUER_URL)
        - --pass-authorization-header=true
        - --skip-provider-button=true
        - --client-id=$(CLIENT_ID)
        - --client-secret=$(CLIENT_SECRET)
        - --cookie-secret=$(COOKIE_SECRET)
        - --cookie-secure=false
        - --cookie-refresh=1h
        - --email-domain=*
        - --ssl-upstream-insecure-skip-verify
        env:
        - name: IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: REDIRECT_URL
          valueFrom:
            secretKeyRef:
              name: kilo-wg-gen-web
              key: REDIRECT_URL
        - name: ISSUER_URL
          valueFrom:
            secretKeyRef:
              name: kilo-wg-gen-web
              key: ISSUER_URL
        - name: CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: kilo-wg-gen-web
              key: CLIENT_ID
        - name: CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: kilo-wg-gen-web
              key: CLIENT_SECRET
        - name: COOKIE_SECRET
          valueFrom:
            secretKeyRef:
              name: kilo-wg-gen-web
              key: COOKIE_SECRET
      volumes:
      - name: tmp-volume
        emptyDir: {}
      - name: config
        configMap:
          name: kilo-wg-gen-web
      serviceAccountName: kilo-wg-gen-web
  volumeClaimTemplates:
  - metadata:
      labels:
        app.kubernetes.io/name: kilo-wg-gen-web
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: kilo-wg-gen-web
stringData:
  REDIRECT_URL:
  ISSUER_URL:
  CLIENT_ID:
  CLIENT_SECRET:
  # python -c 'import os,base64; print(base64.urlsafe_b64encode(os.urandom(16)).decode())'
  COOKIE_SECRET:
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kilo-wg-gen-web
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kilo-wg-gen-web
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - kilo.squat.ai
  resources:
  - peers
  verbs:
  - create
  - delete
  - update
  - list
  - watch
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kilo-wg-gen-web
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kilo-wg-gen-web
subjects:
- kind: ServiceAccount
  name: kilo-wg-gen-web
  namespace: default
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: kilo-wg-gen-web
  name: kilo-wg-gen-web
data:
  config-file.yaml: |+
    authorization:
      resourceAttributes:
        apiGroup: kilo.squat.ai
        apiVersion: v1alpha1
        resource: peers
